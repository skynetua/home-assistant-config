substitutions:
  device_name: kitchen-hood
  friendly_name: Kitchen Hood
  key_low: GPIO21               # black
  key_medium: GPIO22            # white
  key_high: GPIO23              # red
  key_light: GPIO27
  relay_low: GPIO19
  relay_medium: GPIO18
  relay_high: GPIO17
  relay_light: GPIO16
  dth_pin: GPIO25
  gd_pin: GPIO26
  ga_pin: GPIO34
  reed_sw_pin: GPIO4

esphome:
  name: ${device_name}
  platform: ESP32
  board: esp-wrover-kit

packages:
  base: !include common/base.yaml
  wifi: !include common/wifi.yaml

binary_sensor:
  - platform: gpio
    id: key1
    pin:
      number: ${key_low}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - fan.turn_on:
            id: fan1
            speed: 33
    on_release:
      then:
        - script.execute: sync
  - platform: gpio
    id: key2
    pin:
      number: ${key_medium}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - fan.turn_on:
            id: fan1
            speed: 66
    on_release:
      then:
        - script.execute: sync
  - platform: gpio
    id: key3
    pin:
      number: ${key_high}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - fan.turn_on:
            id: fan1
            speed: 100
    on_release:
      then:
        - script.execute: sync            
  - platform: gpio
    id: key4
    pin:
      number: ${key_light}
      inverted: True
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 10ms
    on_state:
      then:
        - light.toggle: light1
  - platform: gpio
    id: gas
    device_class: gas
    name: Hood Gas
    pin: ${gd_pin}

switch:
  - platform: gpio
    pin: ${relay_low}
    id: relay1
    interlock: &interlock_group [relay1, relay2, relay3]
    interlock_wait_time: 300ms

  - platform: gpio
    id: relay2
    pin: ${relay_medium}
    interlock: *interlock_group
    interlock_wait_time: 300ms

  - platform: gpio
    pin: ${relay_high}
    id: relay3
    interlock: *interlock_group
    interlock_wait_time: 300ms
    
sensor:
  - <<: !include common/uptime.yaml
  - <<: !include common/rssi.yaml
  - platform: dht
    model: DHT11
    pin: ${dth_pin}
    temperature:
      name: $friendly_name Temperature
      filters:
        - calibrate_linear:
           - 16.4 -> 16
           - 22.9 -> 22.5
    humidity:
      name: $friendly_name Humidity
    update_interval: 60s
  - platform: adc
    pin: ${ga_pin}
    name: "Gas Concentration"
    update_interval: 60s
    attenuation: 11db
    filters:
      - multiply: 100
    unit_of_measurement: "%"
    icon: "mdi:percent"
  - platform: pulse_counter
    pin: 
      number: $reed_sw_pin
      mode: INPUT_PULLUP
    name: "Gas Consumption"
    update_interval : 60s
    filters:
      - lambda: |-
          static float total_value = 0.00;
          total_value += x * 0.01;
          return total_value;
    unit_of_measurement: "mÂ³"
    accuracy_decimals: 2
    state_class: total_increasing
    device_class: gas

light:
  - platform: binary
    id: light1
    name: $friendly_name Light
    output: light_output

fan:
  - platform: speed
    id: fan1
    output: fan_output
    name: $friendly_name Fan

output:
  - platform: template
    id: fan_output
    type: float 
    write_action:
      - if:
          condition:
            lambda: return ((state == 0));
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay2
            - switch.turn_off: relay3
      - if:
          condition:
            lambda: return ((state > 0) && (state < .34));
          then:
            - switch.turn_on: relay1
      - if:
          condition:
            lambda: return ((state > .34) && (state < .7));
          then:
            - switch.turn_on: relay2
      - if:
          condition:
            lambda: return ((state == 1));
          then:
            - switch.turn_on: relay3
  - platform: gpio
    id: light_output
    pin: ${relay_light}
    
script:
  - id: sync
    mode: restart
    then: 
      - if:
          condition: 
            and: 
              - binary_sensor.is_off: key1
              - binary_sensor.is_off: key2
              - binary_sensor.is_off: key3
          then:
            - fan.turn_off: fan1